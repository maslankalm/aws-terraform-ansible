# Terraform backend configuration
terraform {
  backend "s3" {
    region         = "{{terraform_backend_region}}"
    bucket         = "{{terraform_backend_s3_bucket}}"
    dynamodb_table = "{{terraform_backend_dynamodb_table}}"
    key            = "{{aws_region}}/{{aws_tag_env}}/{{aws_tag_app}}/{{aws_tag_id}}.tfstate"
  }
}

# Provider definition
provider "aws" {
    region = "{{aws_region}}"
}

# Subnets/instances definitions
{% for item in aws_instances %}
data "aws_subnet" "data_aws_subnet_{{item.subnet}}" {
    id = "{{item.subnet}}"
}

resource "aws_instance" "resource_aws_instance_{{item.subnet}}" {
    ami                    = "{{aws_ami_id}}"
    instance_type          = "{{aws_instance_type}}"
    count                  = "{{item.count}}"
    vpc_security_group_ids = ["${aws_security_group.resource_aws_security_group.id}"]
    key_name               = "{{aws_key_name}}"
    subnet_id              = "{{item.subnet}}" 
    tags {
        Name = "{{aws_tag_env}}-{{aws_tag_app}}-{{aws_tag_id}}-${data.aws_subnet.data_aws_subnet_{{item.subnet}}.availability_zone}-${count.index}"
        Env  = "{{aws_tag_env}}"
        App  = "{{aws_tag_app}}"
        Id   = "{{aws_tag_id}}"
    }
}

{% endfor %}

# Security group definition - instances
resource "aws_security_group" "resource_aws_security_group" {
    name = "{{aws_region}}-{{aws_tag_env}}-{{aws_tag_app}}-{{aws_tag_id}}"
    description = "Allow HTTP from LB to instances"
    vpc_id      = "{{aws_vpc}}"
    egress {
        from_port   = 0
        to_port     = 0
        protocol    = "-1"
        cidr_blocks = ["0.0.0.0/0"]
        description = "Enable outgoing traffic"
    }
    ingress {
        from_port   = 22
        to_port     = 22
        protocol    = "tcp"
        cidr_blocks = ["{{ansible_facts.ipify_public_ip}}/32"]
        description = "SSH traffic from management host"
    }
    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        security_groups = ["${aws_security_group.resource_aws_security_group_lb.id}"]
        description = "HTTP traffic from LB"
    }
}

# Security group definition - load balancer
resource "aws_security_group" "resource_aws_security_group_lb" {
    name = "{{aws_region}}-{{aws_tag_env}}-{{aws_tag_app}}-{{aws_tag_id}}-lb"
    description = "Allow traffic from Internet to LB"
    vpc_id      = "{{aws_vpc}}"
    egress {
        from_port       = 0
        to_port         = 0
        protocol        = "-1"
        cidr_blocks     = ["0.0.0.0/0"]
        description     = "Enable outgoing traffic"
    }
    ingress {
        from_port   = 80
        to_port     = 80
        protocol    = "tcp"
        cidr_blocks = ["0.0.0.0/0"]
        description = "HTTP traffic from Internet"
    }
}

# Application Load Balancer
resource "aws_lb" "resource_aws_lb" {
    name = "{{aws_tag_env}}-{{aws_tag_app}}-{{aws_tag_id}}"
    load_balancer_type = "application"
    subnets = [{% for item in aws_instances %}{% if not loop.first %},{% endif %}"{{item.subnet}}"{% endfor %}]
    security_groups    = ["${aws_security_group.resource_aws_security_group_lb.id}"]
}

# Application Load Balancer - Listener
resource "aws_lb_listener" "resource_app_lb_listener" {
  load_balancer_arn = "${aws_lb.resource_aws_lb.arn}"
  port              = "80"
  protocol          = "HTTP"

  default_action {
    type             = "forward"
    target_group_arn = "${aws_lb_target_group.resource_aws_lb_target_group.arn}"
  }
}

# Application Load Balancer - Target Group
resource "aws_lb_target_group" "resource_aws_lb_target_group" {
  name     = "{{aws_tag_env}}-{{aws_tag_app}}-{{aws_tag_id}}"
  port     = 80
  protocol = "HTTP"
  vpc_id   = "{{aws_vpc}}"

  health_check {
    path    = "/"
    matcher = "200" 
  }
}

# Application Load Balancer - Target Groups Attachments
{% for item in aws_instances %}
resource "aws_lb_target_group_attachment" "resource_aws_lb_target_group_attachment_{{item.subnet}}" {
  target_group_arn = "${aws_lb_target_group.resource_aws_lb_target_group.arn}"
  target_id        = "${aws_instance.resource_aws_instance_{{item.subnet}}.*.id[count.index]}"
  count            = {{item.count}}
}
{% endfor %}